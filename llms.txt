# Advanced Problem-Solving & AI Collaboration Repository Navigation Index

## Repository Architecture
**PRIMARY TRACK - PROBLEM-SOLVING METHODOLOGIES:**
- **methodologies/meta-dialectical/**: framework.md(crown_jewel_strategic_decisions)|examples/|templates/|ai-integration.md
- **methodologies/comprehensive-collection/**: collection.md(16_methodologies)|surface-level/|mid-level/|deep-structure/|ai-enhancement/
- **methodologies/selection-guide/**: decision-tree.md|complexity-matrix.md|quick-reference.md

**SECONDARY TRACK - PROMPT ENGINEERING:**
- **prompt-engineering/fundamentals/**: mental_models.md→limitations.md→context_management.md→evaluation.md
- **prompt-engineering/prompt_patterns/**: chain_of_thought.md→few_shot.md→role_prompting.md→format_control.md
- **prompt-engineering/domains/**: coding/{methodology.md,tailoring.md}|writing/{content_creation.md}|data_analysis/{data_exploration.md}|education/{learning_materials.md}
- **prompt-engineering/advanced/**: rag.md|multimodal.md|system_design.md|ethics.md

**SUPPORTING INFRASTRUCTURE:**
- **examples/**: case-studies/{methodology-applications,prompt-engineering,hybrid-approaches}|workflows/{problem-solving,development,analysis}|demonstrations/
- **templates/**: problem-solving/{meta-dialectical,surface-level,mid-level,deep-structure}|prompt-engineering/{coding,writing,data-analysis,general}|hybrid/
- **guides/**: getting-started/|intermediate/|advanced/|reference/
- **tools/**: assessment/|templates/|evaluation/
- **workflows/**: decision-making/|problem-solving/|ai-collaboration/
- **resources/**: presentations/|research/|bibliography/|community/
- **src/**: system_prompts/{code_assistant.txt,code_assistant_formal.txt}|evaluation/README.md|integrations/README.md

## Core Concepts Map
**PROBLEM-SOLVING METHODOLOGIES:**
- **Meta-Dialectical Process**: thesis→devil's_advocate→steelman→synthesis→verification→projection_testing
- **Methodology Complexity Levels**: surface(five_whys,pareto,fishbone)|mid-level(root_cause,systems_mapping,triz)|deep(dialectical,double_loop,critical_systems)
- **AI Integration Patterns**: human_direction+ai_exploration+structured_critique+human_synthesis+collaborative_documentation
- **Selection Criteria**: problem_complexity+time_available+stakeholder_diversity+decision_importance+uncertainty_level

**PROMPT ENGINEERING FOUNDATIONS:**
- **Mental Models**: token_processing>attention_mechanisms>context_windows>pattern_recognition>embedding_spaces
- **Prompt Patterns**: chain_of_thought(reasoning_decomposition)|few_shot(example_learning)|role_prompting(expertise_framing)|format_control(output_structuring)
- **Context Management**: window_allocation(5-15%_instruction+60-80%_content+10-25%_support+5-10%_guidance)|chunking_optimization|token_efficiency|retrieval_augmentation
- **Evaluation**: accuracy+relevance+completeness+format_compliance+consistency+efficiency

## Domain Implementation Matrices
- **Coding**: architecture_patterns(system_design+component_relationships+interaction_models)|implementation_guidance(algorithm_selection+error_handling)|verification_frameworks(testing+performance)
- **Writing**: structural_frameworks(information_architecture+narrative_progression)|voice_calibration(tone+style+register)|engagement_mechanisms(hooks+resonance)
- **Data Analysis**: problem_formulation(question_framing+metrics+constraints)|methodological_guidance(technique_selection+validation)|insight_extraction(pattern_recognition+significance)
- **Education**: knowledge_mapping(concept_relationships+prerequisites)|engagement_design(cognitive_activation+motivation)|assessment_architecture(verification+demonstration)

## Technical Parameters
- **Context Windows**: small(≤8K:70-30_ratio)|medium(8K-32K:60-40_ratio)|large(32K-100K:50-50_ratio)|very_large(≥100K:40-60_ratio)
- **Token Efficiency**: structured_formatting(30-50%_reduction)|terminology_concentration(20-40%_reduction)|semantic_chunking(15-35%_improvement)|noise_elimination(40-60%_reduction)
- **Memory Reinforcement**: rotational_summary(80%_retention)|key_point_anchoring(93%_constraint_adherence)|state_tracking(97%_completion_accuracy)|dependency_refreshing(82%_coherence)

## Advanced Implementation Frameworks
- **RAG Architecture**: query_processing(intent+expansion+routing)→context_engineering(relevance+composition+preparation)→augmentation_strategy(framing+integration+verification)→output_refinement
- **Multimodal Patterns**: cross-modal_reasoning|visual_grounding|sequential_processing|parallel_input|visual-textual_integration|image-based_reasoning
- **System Design**: architecture_patterns(RAG+CoT_orchestration+critiquing_loops+HITL+multi-agent)|components(input+context+prompt+generation+output+feedback)

## Pattern Implementation Examples
- **Chain of Thought**: problem_framing+reasoning_instruction+cognitive_scaffolding+output_structure
- **Few-Shot Learning**: example_selection(coverage+difficulty+diversity+relevance)+example_ordering+format_consistency+example_count(3-5)
- **Role Prompting**: domain_expert|process_guide|perspective_holder|creative_archetype|system_component
- **Format Control**: explicit_instructions|format_exemplars|delimiter_control|schema_definition|template_systems

## Quick Implementation Templates
```
# Expert Advisor Template
## ROLE DEFINITION
You are a world-class expert in [DOMAIN] with [YEARS]+ experience and specialized knowledge in [AREAS].

## CONSULTATION CONTEXT
I'm seeking your expert guidance on [PROBLEM].

## BACKGROUND INFORMATION
[CONTEXT]

## SPECIFIC QUESTIONS
1. [QUESTION_1]
2. [QUESTION_2]

## CONSTRAINTS AND CONSIDERATIONS
- [CONSTRAINT_1]
- [CONSTRAINT_2]

## DELIVERABLE REQUESTED
[SPECIFY_FORMAT]

## DEPTH LEVEL
[OVERVIEW_OR_TECHNICAL]
```

```
# Chain-of-Thought Template
Problem: [PROBLEM_STATEMENT]

I'll solve this step-by-step:

1. Understanding phase:
   - Key elements: [COMPONENTS]
   - Relationships: [CONNECTIONS]
   - Constraints: [LIMITATIONS]

2. Strategy selection:
   - Applicable methods: [APPROACHES]
   - Optimal approach: [SELECTION]

3. Execution:
   - Step 1: [OPERATION]
   - Step 2: [NEXT_STEP]
   
4. Verification:
   - Solution check: [VALIDATION]

Therefore, the solution is [ANSWER].
```

## Critical Update Priorities
- **High Frequency**: context_window_sizes|token_efficiency_metrics|RAG_implementation_details|performance_numbers
- **Medium Frequency**: domain_techniques|implementation_examples|optimization_strategies
- **Low Frequency**: core_prompt_patterns|mental_models|fundamental_reasoning_approaches

## Navigation Shortcuts
**PROBLEM-SOLVING ENTRY POINTS:**
- **Complex Strategic Decisions**: methodologies/meta-dialectical/framework.md
- **Quick Tactical Problems**: methodologies/comprehensive-collection/collection.md#surface-level
- **System/Process Issues**: methodologies/comprehensive-collection/collection.md#mid-level
- **Method Selection**: methodologies/selection-guide/
- **AI-Enhanced Analysis**: methodologies/comprehensive-collection/collection.md#ai-integration

**PROMPT ENGINEERING ENTRY POINTS:**
- **Software Development**: prompt-engineering/domains/coding/methodology.md
- **Content Creation**: prompt-engineering/domains/writing/content_creation.md
- **Data Analysis**: prompt-engineering/domains/data_analysis/data_exploration.md
- **RAG Systems**: prompt-engineering/advanced/rag.md
- **Prompt Templates**: templates/prompt-engineering/
- **Debugging Example**: examples/case_studies/prompt-engineering/code_debugging.md

**HYBRID APPROACHES:**
- **Problem-Solving + AI**: templates/hybrid/
- **Methodology Examples**: examples/case-studies/methodology-applications/
- **AI Collaboration Workflows**: workflows/ai-collaboration/

## Optimization Quick Reference
- Token reduction: Remove redundancy, use structured formats, compress examples
- Context management: 5-15% instruction, 60-80% core content, remainder for support/guidance
- Example selection: 1-2 per class (classification), 3-5 total (reasoning), 5-8 (transformation)
- Pattern composition: Chain-of-Thought+Few-Shot=powerful reasoning with examples
- Domain adaptation: Select patterns then apply domain-specific implementation matrices
